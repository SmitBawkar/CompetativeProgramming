using System;
using System.Collections.Generic;
using System.IO;
using static Solution;

class Solution
{
    public class Node
    {
        public int data;
        public Node left, right;
        public Node(int data)
        {
            this.data = data;
        }
        public void insert(int value)
        {
            if (value <= this.data)
            {
                if (this.left == null)
                    this.left = new Node(value);
                else
                    this.left.insert(value);
            }
            else
            {
                if (this.right == null)
                    this.right = new Node(value);
                else
                    this.right.insert(value);
            }
        }
        public bool contains(int value)
        {
            if (value == this.data)
                return true;
            if (value < this.data)
            {
                if (this.left == null)
                    return false;
                else
                    return this.left.contains(value);
            }
            else
            {
                if (this.right == null)
                    return false;
                else
                   return  this.right.contains(value);
            }

        }
        public void printInOrder()
        {            
            if (this.left != null)
                this.left.printInOrder();
            Console.Write(this.data+"  ");
            if (this.right != null)
                this.right.printInOrder();           
        }
        
        public void printPreOrder()
        {
            Console.Write(this.data + "  ");
            if (this.left != null)
                this.left.printPreOrder();
            if (this.right != null)
                this.right.printPreOrder();              
        }
        public void printPostOrder()
        {
            
            if (this.left != null)
                this.left.printPostOrder();
            if (this.right != null)
                this.right.printPostOrder();
            Console.Write(this.data + "  ");            
        }
    }
    public static void Main(String[] args)
    {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */
        Console.WriteLine("------------Binary Tree-------------");
        Node root = new Node(30);
        root.insert(25);
        root.insert(32);
        root.insert(20);
        root.insert(22);
        root.insert(18);
        root.insert(51);
        root.insert(52);
        Util u = new Util();
        u.printInOrder2(root);
        Console.ReadKey();
    }    
     
    static bool chkBST(Node root) {
        return isBST(root, Int32.MinValue, Int32.MaxValue);
    } 
    static bool isBST(Node root,int min,int max)
    {
       
        if (root == null)
            return true;

        if (!(root.data > min) || !(root.data < max))
            return false;
        return (isBST(root.left, min, root.data - 1) && isBST(root.right, root.data + 1, max));
    }
}
class Util
{
    public void printInOrder2(Node root)
    {
        static int x = 1;
        if (root.left != null)
            printInOrder2(root.left);
        Console.Write(root.data + "  ");
        if (root.right != null)
            printInOrder2(root.right);
    }
}